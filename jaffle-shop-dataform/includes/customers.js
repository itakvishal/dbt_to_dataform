Here's how you can convert that dbt Jinja macro into a Dataform JavaScript function.

In Dataform, `ref()` is a global function available in JavaScript files that correctly resolves the fully qualified name of a table or view defined within your Dataform project. You'll use template literals (backticks `` ` ``) to embed the `ref()` calls directly into your SQL string.

**1. Create a JavaScript file for your function (e.g., `includes/my_macros.js`):**

```javascript
// This file could be located in your 'includes' folder or any other place
// where you want to store reusable Dataform functions.

/**
 * Generates the SQL query for the customer lifetime summary.
 * @returns {string} The SQL query string.
 */
function generateCustomerLifetimeSummarySql() {
  return `
with

customers as (

    select * from ${ref('stg_customers')}

),

orders as (

    select * from ${ref('orders')}

),

customer_orders_summary as (

    select
        orders.customer_id,

        count(distinct orders.order_id) as count_lifetime_orders,
        count(distinct orders.order_id) > 1 as is_repeat_buyer,
        min(orders.ordered_at) as first_ordered_at,
        max(orders.ordered_at) as last_ordered_at,
        sum(orders.subtotal) as lifetime_spend_pretax,
        sum(orders.tax_paid) as lifetime_tax_paid,
        sum(orders.order_total) as lifetime_spend

    from orders

    group by 1

),

joined as (

    select
        customers.*,

        customer_orders_summary.count_lifetime_orders,
        customer_orders_summary.first_ordered_at,
        customer_orders_summary.last_ordered_at,
        customer_orders_summary.lifetime_spend_pretax,
        customer_orders_summary.lifetime_tax_paid,
        customer_orders_summary.lifetime_spend,

        case
            when customer_orders_summary.is_repeat_buyer then 'returning'
            else 'new'
        end as customer_type

    from customers

    left join customer_orders_summary
        on customers.customer_id = customer_orders_summary.customer_id

)

select * from joined
`;
}

// Export the function so it can be imported and used in other Dataform files.
module.exports = {
  generateCustomerLifetimeSummarySql
};
```

**2. How to use this function in a Dataform `table` or `view` definition (e.g., `definitions/customer_lifetime_summary.js`):**

```javascript
// Import the function from your includes file
const { generateCustomerLifetimeSummarySql } = require('../includes/my_macros');

// Define your Dataform table/view
publish("customer_lifetime_summary", {
  // You can add additional configurations here, e.g.,
  // type: "table", // or "view"
  // tags: ["customers", "marketing"],
  // description: "Aggregated customer lifetime summary data."
}).query(ctx => generateCustomerLifetimeSummarySql());
// The .query() method expects a string or a function that returns a string.
// We pass our function directly, and Dataform will execute it to get the SQL string.
```

**Explanation:**

*   **`function generateCustomerLifetimeSummarySql()`:** This defines a standard JavaScript function.
*   **Backticks `` ` ``:** These are used for template literals in JavaScript. They allow for multi-line strings and embedding expressions directly within the string using `${expression}`.
*   **`${ref('stg_customers')}` and `${ref('orders')}`:** This is the key conversion. The dbt `{{ ref('...') }}` macro is replaced by the Dataform `ref('...')` JavaScript function, embedded within the template literal. When Dataform compiles, `ref('stg_customers')` will resolve to the fully qualified table name (e.g., `your_gcp_project.your_dataset.stg_customers`).
*   **`module.exports`:** This makes your function available to other Dataform JavaScript files that might want to `require()` it.
*   **`publish("customer_lifetime_summary").query(ctx => generateCustomerLifetimeSummarySql());`:** This is how you define a Dataform output (table or view) using the SQL generated by your function. The `ctx` argument is passed to the `.query()` function, but in this case, our `generateCustomerLifetimeSummarySql` doesn't need it, so we just call it directly.